// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: order_item.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (
    product_id, 
    quantity
) VALUES (
    $1, $2
) RETURNING order_item_id, order_id, product_id, quantity
`

type CreateOrderItemParams struct {
	ProductID int64       `json:"product_id"`
	Quantity  pgtype.Int4 `json:"quantity"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRow(ctx, createOrderItem, arg.ProductID, arg.Quantity)
	var i OrderItem
	err := row.Scan(
		&i.OrderItemID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
	)
	return i, err
}

const getOrderItem = `-- name: GetOrderItem :one
SELECT order_item_id, order_id, product_id, quantity FROM order_items 
WHERE order_id = $1 LIMIT 1
`

func (q *Queries) GetOrderItem(ctx context.Context, orderID int64) (OrderItem, error) {
	row := q.db.QueryRow(ctx, getOrderItem, orderID)
	var i OrderItem
	err := row.Scan(
		&i.OrderItemID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
	)
	return i, err
}

const listOrderItem = `-- name: ListOrderItem :many
SELECT order_item_id, order_id, product_id, quantity FROM order_items
ORDER BY order_id
LIMIT $1
OFFSET $2
`

type ListOrderItemParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrderItem(ctx context.Context, arg ListOrderItemParams) ([]OrderItem, error) {
	rows, err := q.db.Query(ctx, listOrderItem, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderItem{}
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.OrderItemID,
			&i.OrderID,
			&i.ProductID,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
